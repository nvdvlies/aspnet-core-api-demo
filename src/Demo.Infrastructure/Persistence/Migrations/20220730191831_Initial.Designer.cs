// <auto-generated />
using System;
using System.Collections.Generic;
using Demo.Domain.ApplicationSettings;
using Demo.Domain.Auditlog;
using Demo.Domain.FeatureFlagSettings;
using Demo.Domain.UserPreferences;
using Demo.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Demo.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220730191831_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("demo")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence<int>("CustomerCode")
                .HasMin(1L)
                .HasMax(9999999L);

            modelBuilder.HasSequence<int>("InvoiceNumber")
                .StartsAt(100000L)
                .HasMin(100000L)
                .HasMax(999999L)
                .IsCyclic();

            modelBuilder.Entity("Demo.Domain.ApplicationSettings.ApplicationSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<ApplicationSettingsSettings>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("ApplicationSettings", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Auditlog.Auditlog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<AuditlogItem>>("AuditlogItems")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("EntityId");

                    b.HasIndex("EntityName");

                    b.ToTable("Auditlog", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Customer.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('demo.\"CustomerCode\"')");

                    b.Property<Guid>("CreatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("InvoiceEmailAddress")
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Deleted");

                    b.HasIndex("Name");

                    b.ToTable("Customer", "demo");
                });

            modelBuilder.Entity("Demo.Domain.FeatureFlagSettings.FeatureFlagSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<FeatureFlagSettingsSettings>("Settings")
                        .HasColumnType("jsonb");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("FeatureFlagSettings", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Invoice.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("date")
                        .HasAnnotation("IsUtc", true);

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasDefaultValueSql("CONCAT(date_part('year', current_date), nextval('demo.\"InvoiceNumber\"'))");

                    b.Property<Guid>("LastModifiedBy")
                        .HasMaxLength(64)
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderReference")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("PaymentTerm")
                        .HasColumnType("integer");

                    b.Property<string>("PdfChecksum")
                        .HasColumnType("varchar");

                    b.Property<bool>("PdfIsSynced")
                        .HasColumnType("boolean");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Deleted");

                    b.HasIndex("InvoiceDate");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("Status");

                    b.ToTable("Invoice", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Invoice.InvoiceLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("SellingPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceLine", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Location.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("HouseNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("Location", "demo");
                });

            modelBuilder.Entity("Demo.Domain.OutboxEvent.OutboxEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Event")
                        .HasColumnType("jsonb");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LockToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("IsPublished");

                    b.HasIndex("LockedUntil");

                    b.ToTable("OutboxEvent", "demo");
                });

            modelBuilder.Entity("Demo.Domain.OutboxMessage.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LockToken")
                        .IsConcurrencyToken()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("IsSent");

                    b.HasIndex("LockedUntil");

                    b.ToTable("OutboxMessage", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Role.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("PermissionGroupId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("PermissionGroupId");

                    b.ToTable("Permission", "demo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bdd6b139-be77-4302-b80e-c1bce405ada5"),
                            Name = "Customers:Read",
                            PermissionGroupId = new Guid("bce43d29-e527-4364-890a-0a49224abf74"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("c97b9d9d-6611-4a26-a1b4-43708402a49a"),
                            Name = "Customers:Write",
                            PermissionGroupId = new Guid("bce43d29-e527-4364-890a-0a49224abf74"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("931d572a-f85b-4dbb-a32d-8fee11e0e28d"),
                            Name = "Invoices:Read",
                            PermissionGroupId = new Guid("4b4e2d70-02dc-43ac-a8bc-c75c25e1e71d"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("d5d6786c-ca5d-476e-b7a9-ccf67422b98d"),
                            Name = "Invoices:Write",
                            PermissionGroupId = new Guid("4b4e2d70-02dc-43ac-a8bc-c75c25e1e71d"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("537d9994-517f-490b-8c7e-5da886e80d44"),
                            Name = "FeatureFlagSettings:Read",
                            PermissionGroupId = new Guid("6fd39917-5f96-472d-ac69-d2a8c56880b7"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("7f77e408-04ce-496c-b347-bac63b0bc870"),
                            Name = "FeatureFlagSettings:Write",
                            PermissionGroupId = new Guid("6fd39917-5f96-472d-ac69-d2a8c56880b7"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("286864f7-1c3c-4ca5-9ae0-5efe8b56bf5e"),
                            Name = "Users:Read",
                            PermissionGroupId = new Guid("9b621e5b-e277-4c88-88d2-18a7befb45aa"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("b274daec-0a76-4bcc-b268-09768517d265"),
                            Name = "Users:Write",
                            PermissionGroupId = new Guid("9b621e5b-e277-4c88-88d2-18a7befb45aa"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("db7b21d3-41ee-44d2-8218-78ef78f262d3"),
                            Name = "ApplicationSettings:Read",
                            PermissionGroupId = new Guid("d3fda6f7-4a23-4a2c-bfcf-abd0aec25774"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("29ece69e-c315-4902-b959-82790a38dc8a"),
                            Name = "ApplicationSettings:Write",
                            PermissionGroupId = new Guid("d3fda6f7-4a23-4a2c-bfcf-abd0aec25774"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("7baf877f-dda2-4940-b7e5-38274fe7f28b"),
                            Name = "Roles:Read",
                            PermissionGroupId = new Guid("7af7d630-e85d-4183-966f-a2cf4a3d67f0"),
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("692a27f6-c217-4bfe-a210-8ab19d809199"),
                            Name = "Roles:Write",
                            PermissionGroupId = new Guid("7af7d630-e85d-4183-966f-a2cf4a3d67f0"),
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Demo.Domain.Role.PermissionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PermissionGroup", "demo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bce43d29-e527-4364-890a-0a49224abf74"),
                            Name = "Customers",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("4b4e2d70-02dc-43ac-a8bc-c75c25e1e71d"),
                            Name = "Invoices",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("6fd39917-5f96-472d-ac69-d2a8c56880b7"),
                            Name = "FeatureFlagSettings",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("9b621e5b-e277-4c88-88d2-18a7befb45aa"),
                            Name = "Users",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("d3fda6f7-4a23-4a2c-bfcf-abd0aec25774"),
                            Name = "ApplicationSettings",
                            xmin = 0u
                        },
                        new
                        {
                            Id = new Guid("7af7d630-e85d-4183-966f-a2cf4a3d67f0"),
                            Name = "Roles",
                            xmin = 0u
                        });
                });

            modelBuilder.Entity("Demo.Domain.Role.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Role.RolePermission", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermission", "demo");
                });

            modelBuilder.Entity("Demo.Domain.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasAnnotation("IsUtc", true);

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Deleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("character varying(320)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("GivenName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("Fullname");

                    b.ToTable("User", "demo");
                });

            modelBuilder.Entity("Demo.Domain.User.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "demo");
                });

            modelBuilder.Entity("Demo.Domain.UserPreferences.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("LastModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<UserPreferencesPreferences>("Preferences")
                        .HasColumnType("jsonb");

                    b.Property<uint>("xmin")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid");

                    b.HasKey("Id");

                    b.ToTable("UserPreferences", "demo");
                });

            modelBuilder.Entity("Demo.Domain.Customer.Customer", b =>
                {
                    b.HasOne("Demo.Domain.Location.Location", "Address")
                        .WithOne()
                        .HasForeignKey("Demo.Domain.Customer.Customer", "AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Demo.Domain.Invoice.Invoice", b =>
                {
                    b.HasOne("Demo.Domain.Customer.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Demo.Domain.Invoice.InvoiceLine", b =>
                {
                    b.HasOne("Demo.Domain.Invoice.Invoice", "Invoice")
                        .WithMany("InvoiceLines")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("Demo.Domain.Role.Permission", b =>
                {
                    b.HasOne("Demo.Domain.Role.PermissionGroup", "PermissionGroup")
                        .WithMany("Permissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("Demo.Domain.Role.RolePermission", b =>
                {
                    b.HasOne("Demo.Domain.Role.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo.Domain.Role.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Demo.Domain.User.UserRole", b =>
                {
                    b.HasOne("Demo.Domain.Role.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Demo.Domain.User.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Demo.Domain.UserPreferences.UserPreferences", b =>
                {
                    b.HasOne("Demo.Domain.User.User", "User")
                        .WithOne()
                        .HasForeignKey("Demo.Domain.UserPreferences.UserPreferences", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Demo.Domain.Customer.Customer", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("Demo.Domain.Invoice.Invoice", b =>
                {
                    b.Navigation("InvoiceLines");
                });

            modelBuilder.Entity("Demo.Domain.Role.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Demo.Domain.Role.PermissionGroup", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("Demo.Domain.Role.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Demo.Domain.User.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
