
//----------------------
// <auto-generated>
//     Generated using Demo.SignalrTypescript.Generator
// </auto-generated>
//----------------------
import { Injectable, Inject, InjectionToken } from '@angular/core';
import { HubConnection, IHttpConnectionOptions } from '@microsoft/signalr';
import { lastValueFrom, Subject } from 'rxjs';
import * as signalR from '@microsoft/signalr';
import { AuthService } from '@auth0/auth0-angular';
import { LoggerService } from '@shared/services/logger.service';

export const SIGNALR_BASE_URL = new InjectionToken<string>('SIGNALR_BASE_URL');

@Injectable({
  providedIn: 'root'
})
export class SignalRService {
  public hubConnection: HubConnection;

  constructor(
    @Inject(SIGNALR_BASE_URL) private readonly baseUrl: string,
    private readonly authService: AuthService,
    private readonly loggerService: LoggerService
  ) {
    this.hubConnection = new signalR.HubConnectionBuilder()
      .withUrl(this.baseUrl + '/hub', {
        accessTokenFactory: () => lastValueFrom(this.authService.getAccessTokenSilently())
      } as IHttpConnectionOptions)
      .withAutomaticReconnect()
      .configureLogging(signalR.LogLevel.Warning)
      .build();

    this.authService.isAuthenticated$.subscribe((isAuthenticated) =>
      isAuthenticated ? this.connect() : this.disconnect()
    );
  }

  private connect(): void {
    this.hubConnection
      .start()
      .catch((err) => this.loggerService.logError('Error while starting SignalR connection', undefined, err));
  }

  private disconnect(): void {
    if (this.hubConnection) {
      this.hubConnection
        .stop()
        .catch((err) => this.loggerService.logWarning(`Error while terminating SignalR connection: ${err}`));
    }
  }
}

export interface CustomerCreatedEvent {
  id: string;
  createdBy: string;
}

export interface CustomerUpdatedEvent {
  id: string;
  updatedBy: string;
}

export interface CustomerDeletedEvent {
  id: string;
  deletedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class CustomerEventsService {
  private customerCreated = new Subject<CustomerCreatedEvent>();
  private customerUpdated = new Subject<CustomerUpdatedEvent>();
  private customerDeleted = new Subject<CustomerDeletedEvent>();

  public customerCreated$ = this.customerCreated.asObservable();
  public customerUpdated$ = this.customerUpdated.asObservable();
  public customerDeleted$ = this.customerDeleted.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('CustomerCreated', (id: string, createdBy: string) =>
      this.customerCreated.next({ id, createdBy })
    );
    this.signalRService.hubConnection.on('CustomerUpdated', (id: string, updatedBy: string) =>
      this.customerUpdated.next({ id, updatedBy })
    );
    this.signalRService.hubConnection.on('CustomerDeleted', (id: string, deletedBy: string) =>
      this.customerDeleted.next({ id, deletedBy })
    );
  }
}

export interface InvoiceCreatedEvent {
  id: string;
  createdBy: string;
}

export interface InvoiceUpdatedEvent {
  id: string;
  updatedBy: string;
}

export interface InvoiceDeletedEvent {
  id: string;
  deletedBy: string;
}

export interface InvoiceCancelledEvent {
  id: string;
}

export interface InvoicePaidEvent {
  id: string;
}

export interface InvoiceSentEvent {
  id: string;
}

export interface InvoicePdfSynchronizedEvent {
  id: string;
}

@Injectable({
  providedIn: 'root'
})
export class InvoiceEventsService {
  private invoiceCreated = new Subject<InvoiceCreatedEvent>();
  private invoiceUpdated = new Subject<InvoiceUpdatedEvent>();
  private invoiceDeleted = new Subject<InvoiceDeletedEvent>();
  private invoiceCancelled = new Subject<InvoiceCancelledEvent>();
  private invoicePaid = new Subject<InvoicePaidEvent>();
  private invoiceSent = new Subject<InvoiceSentEvent>();
  private invoicePdfSynchronized = new Subject<InvoicePdfSynchronizedEvent>();

  public invoiceCreated$ = this.invoiceCreated.asObservable();
  public invoiceUpdated$ = this.invoiceUpdated.asObservable();
  public invoiceDeleted$ = this.invoiceDeleted.asObservable();
  public invoiceCancelled$ = this.invoiceCancelled.asObservable();
  public invoicePaid$ = this.invoicePaid.asObservable();
  public invoiceSent$ = this.invoiceSent.asObservable();
  public invoicePdfSynchronized$ = this.invoicePdfSynchronized.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('InvoiceCreated', (id: string, createdBy: string) =>
      this.invoiceCreated.next({ id, createdBy })
    );
    this.signalRService.hubConnection.on('InvoiceUpdated', (id: string, updatedBy: string) =>
      this.invoiceUpdated.next({ id, updatedBy })
    );
    this.signalRService.hubConnection.on('InvoiceDeleted', (id: string, deletedBy: string) =>
      this.invoiceDeleted.next({ id, deletedBy })
    );
    this.signalRService.hubConnection.on('InvoiceCancelled', (id: string) =>
      this.invoiceCancelled.next({ id })
    );
    this.signalRService.hubConnection.on('InvoicePaid', (id: string) =>
      this.invoicePaid.next({ id })
    );
    this.signalRService.hubConnection.on('InvoiceSent', (id: string) =>
      this.invoiceSent.next({ id })
    );
    this.signalRService.hubConnection.on('InvoicePdfSynchronized', (id: string) =>
      this.invoicePdfSynchronized.next({ id })
    );
  }
}

export interface ApplicationSettingsUpdatedEvent {
  id: string;
  updatedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class ApplicationSettingsEventsService {
  private applicationSettingsUpdated = new Subject<ApplicationSettingsUpdatedEvent>();

  public applicationSettingsUpdated$ = this.applicationSettingsUpdated.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('ApplicationSettingsUpdated', (id: string, updatedBy: string) =>
      this.applicationSettingsUpdated.next({ id, updatedBy })
    );
  }
}

export interface UserCreatedEvent {
  id: string;
  createdBy: string;
}

export interface UserUpdatedEvent {
  id: string;
  updatedBy: string;
}

export interface UserDeletedEvent {
  id: string;
  deletedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class UserEventsService {
  private userCreated = new Subject<UserCreatedEvent>();
  private userUpdated = new Subject<UserUpdatedEvent>();
  private userDeleted = new Subject<UserDeletedEvent>();

  public userCreated$ = this.userCreated.asObservable();
  public userUpdated$ = this.userUpdated.asObservable();
  public userDeleted$ = this.userDeleted.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('UserCreated', (id: string, createdBy: string) =>
      this.userCreated.next({ id, createdBy })
    );
    this.signalRService.hubConnection.on('UserUpdated', (id: string, updatedBy: string) =>
      this.userUpdated.next({ id, updatedBy })
    );
    this.signalRService.hubConnection.on('UserDeleted', (id: string, deletedBy: string) =>
      this.userDeleted.next({ id, deletedBy })
    );
  }
}

export interface RoleCreatedEvent {
  id: string;
  createdBy: string;
}

export interface RoleUpdatedEvent {
  id: string;
  updatedBy: string;
}

export interface RoleDeletedEvent {
  id: string;
  deletedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class RoleEventsService {
  private roleCreated = new Subject<RoleCreatedEvent>();
  private roleUpdated = new Subject<RoleUpdatedEvent>();
  private roleDeleted = new Subject<RoleDeletedEvent>();

  public roleCreated$ = this.roleCreated.asObservable();
  public roleUpdated$ = this.roleUpdated.asObservable();
  public roleDeleted$ = this.roleDeleted.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('RoleCreated', (id: string, createdBy: string) =>
      this.roleCreated.next({ id, createdBy })
    );
    this.signalRService.hubConnection.on('RoleUpdated', (id: string, updatedBy: string) =>
      this.roleUpdated.next({ id, updatedBy })
    );
    this.signalRService.hubConnection.on('RoleDeleted', (id: string, deletedBy: string) =>
      this.roleDeleted.next({ id, deletedBy })
    );
  }
}

export interface FeatureFlagSettingsUpdatedEvent {
  id: string;
  updatedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class FeatureFlagSettingsEventsService {
  private featureFlagSettingsUpdated = new Subject<FeatureFlagSettingsUpdatedEvent>();

  public featureFlagSettingsUpdated$ = this.featureFlagSettingsUpdated.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('FeatureFlagSettingsUpdated', (id: string, updatedBy: string) =>
      this.featureFlagSettingsUpdated.next({ id, updatedBy })
    );
  }
}

export interface UserPreferencesUpdatedEvent {
  id: string;
  updatedBy: string;
}

export interface UserPreferencesDeletedEvent {
  id: string;
  deletedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class UserPreferencesEventsService {
  private userPreferencesUpdated = new Subject<UserPreferencesUpdatedEvent>();
  private userPreferencesDeleted = new Subject<UserPreferencesDeletedEvent>();

  public userPreferencesUpdated$ = this.userPreferencesUpdated.asObservable();
  public userPreferencesDeleted$ = this.userPreferencesDeleted.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('UserPreferencesUpdated', (id: string, updatedBy: string) =>
      this.userPreferencesUpdated.next({ id, updatedBy })
    );
    this.signalRService.hubConnection.on('UserPreferencesDeleted', (id: string, deletedBy: string) =>
      this.userPreferencesDeleted.next({ id, deletedBy })
    );
  }
}

export interface CurrentUserUpdatedEvent {
  updatedBy: string;
}

@Injectable({
  providedIn: 'root'
})
export class CurrentUserEventsService {
  private currentUserUpdated = new Subject<CurrentUserUpdatedEvent>();

  public currentUserUpdated$ = this.currentUserUpdated.asObservable();

  constructor(private signalRService: SignalRService) {
    this.signalRService.hubConnection.on('CurrentUserUpdated', (updatedBy: string) =>
      this.currentUserUpdated.next({ updatedBy })
    );
  }
}

